<link rel="import" href="../lib/polymer/polymer.html">
<!-- Importing Custom Elements -->
<link rel="import" href="../lib/dom-bind-notifier-polymerpatch/dom-bind-notifier.html">
<link rel="import" href="../lib/juicy-select/juicy-select.html">
<link rel="import" href="../lib/polymer-select-with-options/select-with-options.html">

<dom-module id="dashboard-root">
	<template>
		<div>
			Hi, {{model.user}} or [[firstSelectedUser(model.users.*)]]!
		</div>
		
		Projects:
		<juicy-select value="{{selectedProject::change}}" options="{{model.projects}}" text-property="Title" value-property="Id" selected-property="selected">
		</juicy-select>
		Users:
		<juicy-select options="{{model.users}}" text-property="Name" value-property="Id" selected-property="selected" multiple="true">
		</juicy-select>
		<select is="select-with-options" options="{{model.users}}" option-value="Id" option-label="Name" multiple="true">
		</select>
		<select is="select-with-options" />
		<select multiple="true">
			<template is="dom-repeat" items="{{model.users}}" as="user">
				<option value="{{user.id}}" selected="{{user.selected}}">{{user.Name}}</option>                                                                                                                             
			</template>
		</select>
		<button value="zxczxc" on-tap="tapped">222</button>
		<dom-bind-notifier path="model" observed-object="{{model}}" deep></dom-bind-notifier>
	</template>
</dom-module>
<script>
var projects = [
	{
		selected: false,
		Title: 'DevPRO',
		Id: 10,
		Users: [
			1, 2, 3
		]
	},
	{
	selected: true,
		Title: 'RuPM',
		Id: 11,
		Users: [
			2, 3, 4
		]
	},
];
var users = [
	{
		Id: 1,
		Name: 'Artur',
		selected: false
	},
	{
		Id: 2,
		Name: 'Sergey',
		selected: true
	},
	{
		Id: 3,
		Name: 'Semyon',
		selected: false
	},
	{
		Id: 4,
		Name: 'Anton',
		selected: false
	},
];
Polymer({
  is: 'dashboard-root',
  properties: {
	selectedProject: {
		type: 'string',
        observer: 'projectChanged',                                                                                                                                                                         
        notify: true                                                                                                                                                                                        
      }
  },
  tapped: function() {
	var z = 1;
  },
  projectChanged: function (e, b) {
	var selectedProject = projects.first(function(x) {return x.Id == e;});
	var index = 0;
	this.model.users.forEach(function(x) { 
		x.selected = selectedProject.Users.contains(x.Id);
	});
  },
  firstSelectedUser: function(u) {
	return users.first(function(x) {return x.selected}).Name;
  },

  ready: function() {

	this.users = users;
	this.model = {
		user: 'Artur',
		users: users,
		projects: projects
	};
  },
  ChangeName: function() {
	this.model.user = this.model.user + "_1";
  }
});
</script>